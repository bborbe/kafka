// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/bborbe/kafka"
)

type KafkaConsumerMetrics struct {
	CurrentOffsetStub        func(kafka.Topic, kafka.Partition, kafka.Offset)
	currentOffsetMutex       sync.RWMutex
	currentOffsetArgsForCall []struct {
		arg1 kafka.Topic
		arg2 kafka.Partition
		arg3 kafka.Offset
	}
	HighWaterMarkOffsetStub        func(kafka.Topic, kafka.Partition, kafka.Offset)
	highWaterMarkOffsetMutex       sync.RWMutex
	highWaterMarkOffsetArgsForCall []struct {
		arg1 kafka.Topic
		arg2 kafka.Partition
		arg3 kafka.Offset
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *KafkaConsumerMetrics) CurrentOffset(arg1 kafka.Topic, arg2 kafka.Partition, arg3 kafka.Offset) {
	fake.currentOffsetMutex.Lock()
	fake.currentOffsetArgsForCall = append(fake.currentOffsetArgsForCall, struct {
		arg1 kafka.Topic
		arg2 kafka.Partition
		arg3 kafka.Offset
	}{arg1, arg2, arg3})
	stub := fake.CurrentOffsetStub
	fake.recordInvocation("CurrentOffset", []interface{}{arg1, arg2, arg3})
	fake.currentOffsetMutex.Unlock()
	if stub != nil {
		fake.CurrentOffsetStub(arg1, arg2, arg3)
	}
}

func (fake *KafkaConsumerMetrics) CurrentOffsetCallCount() int {
	fake.currentOffsetMutex.RLock()
	defer fake.currentOffsetMutex.RUnlock()
	return len(fake.currentOffsetArgsForCall)
}

func (fake *KafkaConsumerMetrics) CurrentOffsetCalls(stub func(kafka.Topic, kafka.Partition, kafka.Offset)) {
	fake.currentOffsetMutex.Lock()
	defer fake.currentOffsetMutex.Unlock()
	fake.CurrentOffsetStub = stub
}

func (fake *KafkaConsumerMetrics) CurrentOffsetArgsForCall(i int) (kafka.Topic, kafka.Partition, kafka.Offset) {
	fake.currentOffsetMutex.RLock()
	defer fake.currentOffsetMutex.RUnlock()
	argsForCall := fake.currentOffsetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *KafkaConsumerMetrics) HighWaterMarkOffset(arg1 kafka.Topic, arg2 kafka.Partition, arg3 kafka.Offset) {
	fake.highWaterMarkOffsetMutex.Lock()
	fake.highWaterMarkOffsetArgsForCall = append(fake.highWaterMarkOffsetArgsForCall, struct {
		arg1 kafka.Topic
		arg2 kafka.Partition
		arg3 kafka.Offset
	}{arg1, arg2, arg3})
	stub := fake.HighWaterMarkOffsetStub
	fake.recordInvocation("HighWaterMarkOffset", []interface{}{arg1, arg2, arg3})
	fake.highWaterMarkOffsetMutex.Unlock()
	if stub != nil {
		fake.HighWaterMarkOffsetStub(arg1, arg2, arg3)
	}
}

func (fake *KafkaConsumerMetrics) HighWaterMarkOffsetCallCount() int {
	fake.highWaterMarkOffsetMutex.RLock()
	defer fake.highWaterMarkOffsetMutex.RUnlock()
	return len(fake.highWaterMarkOffsetArgsForCall)
}

func (fake *KafkaConsumerMetrics) HighWaterMarkOffsetCalls(stub func(kafka.Topic, kafka.Partition, kafka.Offset)) {
	fake.highWaterMarkOffsetMutex.Lock()
	defer fake.highWaterMarkOffsetMutex.Unlock()
	fake.HighWaterMarkOffsetStub = stub
}

func (fake *KafkaConsumerMetrics) HighWaterMarkOffsetArgsForCall(i int) (kafka.Topic, kafka.Partition, kafka.Offset) {
	fake.highWaterMarkOffsetMutex.RLock()
	defer fake.highWaterMarkOffsetMutex.RUnlock()
	argsForCall := fake.highWaterMarkOffsetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *KafkaConsumerMetrics) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.currentOffsetMutex.RLock()
	defer fake.currentOffsetMutex.RUnlock()
	fake.highWaterMarkOffsetMutex.RLock()
	defer fake.highWaterMarkOffsetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *KafkaConsumerMetrics) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kafka.ConsumerMetrics = new(KafkaConsumerMetrics)
