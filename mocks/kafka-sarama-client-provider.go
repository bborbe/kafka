// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/kafka"
)

type KafkaSaramaClientProvider struct {
	ClientStub        func(context.Context) (kafka.SaramaClient, error)
	clientMutex       sync.RWMutex
	clientArgsForCall []struct {
		arg1 context.Context
	}
	clientReturns struct {
		result1 kafka.SaramaClient
		result2 error
	}
	clientReturnsOnCall map[int]struct {
		result1 kafka.SaramaClient
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *KafkaSaramaClientProvider) Client(arg1 context.Context) (kafka.SaramaClient, error) {
	fake.clientMutex.Lock()
	ret, specificReturn := fake.clientReturnsOnCall[len(fake.clientArgsForCall)]
	fake.clientArgsForCall = append(fake.clientArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClientStub
	fakeReturns := fake.clientReturns
	fake.recordInvocation("Client", []interface{}{arg1})
	fake.clientMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *KafkaSaramaClientProvider) ClientCallCount() int {
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	return len(fake.clientArgsForCall)
}

func (fake *KafkaSaramaClientProvider) ClientCalls(stub func(context.Context) (kafka.SaramaClient, error)) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = stub
}

func (fake *KafkaSaramaClientProvider) ClientArgsForCall(i int) context.Context {
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	argsForCall := fake.clientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *KafkaSaramaClientProvider) ClientReturns(result1 kafka.SaramaClient, result2 error) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = nil
	fake.clientReturns = struct {
		result1 kafka.SaramaClient
		result2 error
	}{result1, result2}
}

func (fake *KafkaSaramaClientProvider) ClientReturnsOnCall(i int, result1 kafka.SaramaClient, result2 error) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = nil
	if fake.clientReturnsOnCall == nil {
		fake.clientReturnsOnCall = make(map[int]struct {
			result1 kafka.SaramaClient
			result2 error
		})
	}
	fake.clientReturnsOnCall[i] = struct {
		result1 kafka.SaramaClient
		result2 error
	}{result1, result2}
}

func (fake *KafkaSaramaClientProvider) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *KafkaSaramaClientProvider) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *KafkaSaramaClientProvider) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *KafkaSaramaClientProvider) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *KafkaSaramaClientProvider) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *KafkaSaramaClientProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *KafkaSaramaClientProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kafka.SaramaClientProvider = new(KafkaSaramaClientProvider)
