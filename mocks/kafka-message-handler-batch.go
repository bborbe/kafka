// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/IBM/sarama"
	"github.com/bborbe/kafka"
)

type KafkaMessageHandlerBatch struct {
	ConsumeMessagesStub        func(context.Context, []*sarama.ConsumerMessage) error
	consumeMessagesMutex       sync.RWMutex
	consumeMessagesArgsForCall []struct {
		arg1 context.Context
		arg2 []*sarama.ConsumerMessage
	}
	consumeMessagesReturns struct {
		result1 error
	}
	consumeMessagesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *KafkaMessageHandlerBatch) ConsumeMessages(arg1 context.Context, arg2 []*sarama.ConsumerMessage) error {
	var arg2Copy []*sarama.ConsumerMessage
	if arg2 != nil {
		arg2Copy = make([]*sarama.ConsumerMessage, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.consumeMessagesMutex.Lock()
	ret, specificReturn := fake.consumeMessagesReturnsOnCall[len(fake.consumeMessagesArgsForCall)]
	fake.consumeMessagesArgsForCall = append(fake.consumeMessagesArgsForCall, struct {
		arg1 context.Context
		arg2 []*sarama.ConsumerMessage
	}{arg1, arg2Copy})
	stub := fake.ConsumeMessagesStub
	fakeReturns := fake.consumeMessagesReturns
	fake.recordInvocation("ConsumeMessages", []interface{}{arg1, arg2Copy})
	fake.consumeMessagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *KafkaMessageHandlerBatch) ConsumeMessagesCallCount() int {
	fake.consumeMessagesMutex.RLock()
	defer fake.consumeMessagesMutex.RUnlock()
	return len(fake.consumeMessagesArgsForCall)
}

func (fake *KafkaMessageHandlerBatch) ConsumeMessagesCalls(stub func(context.Context, []*sarama.ConsumerMessage) error) {
	fake.consumeMessagesMutex.Lock()
	defer fake.consumeMessagesMutex.Unlock()
	fake.ConsumeMessagesStub = stub
}

func (fake *KafkaMessageHandlerBatch) ConsumeMessagesArgsForCall(i int) (context.Context, []*sarama.ConsumerMessage) {
	fake.consumeMessagesMutex.RLock()
	defer fake.consumeMessagesMutex.RUnlock()
	argsForCall := fake.consumeMessagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *KafkaMessageHandlerBatch) ConsumeMessagesReturns(result1 error) {
	fake.consumeMessagesMutex.Lock()
	defer fake.consumeMessagesMutex.Unlock()
	fake.ConsumeMessagesStub = nil
	fake.consumeMessagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *KafkaMessageHandlerBatch) ConsumeMessagesReturnsOnCall(i int, result1 error) {
	fake.consumeMessagesMutex.Lock()
	defer fake.consumeMessagesMutex.Unlock()
	fake.ConsumeMessagesStub = nil
	if fake.consumeMessagesReturnsOnCall == nil {
		fake.consumeMessagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.consumeMessagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *KafkaMessageHandlerBatch) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *KafkaMessageHandlerBatch) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kafka.MessageHandlerBatch = new(KafkaMessageHandlerBatch)
