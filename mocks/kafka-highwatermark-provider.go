// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/kafka"
)

type KafkaHighwaterMarkProvider struct {
	HighWaterMarkStub        func(context.Context, kafka.Topic, kafka.Partition) (*kafka.Offset, error)
	highWaterMarkMutex       sync.RWMutex
	highWaterMarkArgsForCall []struct {
		arg1 context.Context
		arg2 kafka.Topic
		arg3 kafka.Partition
	}
	highWaterMarkReturns struct {
		result1 *kafka.Offset
		result2 error
	}
	highWaterMarkReturnsOnCall map[int]struct {
		result1 *kafka.Offset
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *KafkaHighwaterMarkProvider) HighWaterMark(arg1 context.Context, arg2 kafka.Topic, arg3 kafka.Partition) (*kafka.Offset, error) {
	fake.highWaterMarkMutex.Lock()
	ret, specificReturn := fake.highWaterMarkReturnsOnCall[len(fake.highWaterMarkArgsForCall)]
	fake.highWaterMarkArgsForCall = append(fake.highWaterMarkArgsForCall, struct {
		arg1 context.Context
		arg2 kafka.Topic
		arg3 kafka.Partition
	}{arg1, arg2, arg3})
	stub := fake.HighWaterMarkStub
	fakeReturns := fake.highWaterMarkReturns
	fake.recordInvocation("HighWaterMark", []interface{}{arg1, arg2, arg3})
	fake.highWaterMarkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *KafkaHighwaterMarkProvider) HighWaterMarkCallCount() int {
	fake.highWaterMarkMutex.RLock()
	defer fake.highWaterMarkMutex.RUnlock()
	return len(fake.highWaterMarkArgsForCall)
}

func (fake *KafkaHighwaterMarkProvider) HighWaterMarkCalls(stub func(context.Context, kafka.Topic, kafka.Partition) (*kafka.Offset, error)) {
	fake.highWaterMarkMutex.Lock()
	defer fake.highWaterMarkMutex.Unlock()
	fake.HighWaterMarkStub = stub
}

func (fake *KafkaHighwaterMarkProvider) HighWaterMarkArgsForCall(i int) (context.Context, kafka.Topic, kafka.Partition) {
	fake.highWaterMarkMutex.RLock()
	defer fake.highWaterMarkMutex.RUnlock()
	argsForCall := fake.highWaterMarkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *KafkaHighwaterMarkProvider) HighWaterMarkReturns(result1 *kafka.Offset, result2 error) {
	fake.highWaterMarkMutex.Lock()
	defer fake.highWaterMarkMutex.Unlock()
	fake.HighWaterMarkStub = nil
	fake.highWaterMarkReturns = struct {
		result1 *kafka.Offset
		result2 error
	}{result1, result2}
}

func (fake *KafkaHighwaterMarkProvider) HighWaterMarkReturnsOnCall(i int, result1 *kafka.Offset, result2 error) {
	fake.highWaterMarkMutex.Lock()
	defer fake.highWaterMarkMutex.Unlock()
	fake.HighWaterMarkStub = nil
	if fake.highWaterMarkReturnsOnCall == nil {
		fake.highWaterMarkReturnsOnCall = make(map[int]struct {
			result1 *kafka.Offset
			result2 error
		})
	}
	fake.highWaterMarkReturnsOnCall[i] = struct {
		result1 *kafka.Offset
		result2 error
	}{result1, result2}
}

func (fake *KafkaHighwaterMarkProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *KafkaHighwaterMarkProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kafka.HighwaterMarkProvider = new(KafkaHighwaterMarkProvider)
